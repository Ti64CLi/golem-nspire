/**
 *  vm.h
 *  @author Alexander Koch
 *  @desc Golem stack-based virtual machine (GVM)
 *
 *  The virtual machine runs the generated bytecode.
 *  Instructions are defined in bytecode.h and Bytecode.md.
 */

#ifndef vm_h
#define vm_h

#include <time.h>
#include <assert.h>
#include <stdint.h>

#include <core/api.h>
#include <adt/vector.h>
#include <adt/hashmap.h>

#include <vm/val.h>
#include <vm/bytecode.h>
#include <lib/libdef.h>

#define STACK_SIZE 512
#define LOCALS_SIZE 512

/**
 *  vm_t - VM definition
 *
 *  @stack General purpose Stack / RAM
 *  @locals Storage for local variables relative to the frame pointer
 *  @pc Program counter
 *  @fp Frame pointer
 *  @sp Stack pointer
 *  @reserve Space reserve info
 *  @firstVal Current reference for GC
 *  @numObject Counted objects by GC
 *  @maxObjects Count of objects when GC is triggered
 *  @errjmp Jump position when failure occurs.
 *  @argc Argument count
 *  @argc Arguments
 */
typedef struct
{
	// Stack
	val_t stack[STACK_SIZE];
	val_t locals[LOCALS_SIZE];
	int pc;
	int fp;
	int sp;
	int reserve;

	// Gargabe collection
	obj_t* firstVal;
	int numObjects;
	int maxObjects;

	int errjmp;
	int argc;
	char** argv;
} vm_t;

// Internal function
typedef val_t (*gvm_c_function)(vm_t*);

// Methods
void vm_init(vm_t* vm);
void vm_run(vm_t* vm, vector_t* buffer);
void vm_run_args(vm_t* vm, vector_t* buffer, int argc, char** argv);

void push(vm_t* vm, val_t val);
val_t pop(vm_t* vm);

#endif
