# Simple brainf interpreter
# Copyright (c) Alexander Koch 2015
using core
using io

# Define tape and an index
let mut tape = [0]
let mut idx = 0

func charAt(i: int) -> str {
	return [i.to_c()]
}

# Process an input character
func process(c: char) {
	if c = "+" {
		tape[idx] := tape[idx] + 1
	} else if c = "-" {
		tape[idx] := tape[idx] - 1
	} else if c = ">" {
		idx := idx + 1

		# Allocate more tape if needed
		if idx > tape.length() - 1 {
			tape := tape.add(0)
		}
	} else if c = "<" {
		idx := idx - 1
	} else if c = "." {
		print(charAt(tape[idx]))
	} else {
		# Invalid operation
		# Note: Newline and carriage return will end up here
	}
}

# The interpreter
func eval(filename: str) {
	let file = readFile(filename)
	let len = file.length()
	
	if len = 0 {
		println("File doesn't exist")
	}

	#for loop
	let mut loop = [0]
	let mut loopid = -1

	# Process the tape
	let mut i = 0
	let mut c = " "

	while i < len {
		c := file.at(i)
		
		if c = "[" {
			loopid := loopid + 1
			if loopid > loop.length() - 1 {
				loop := loop.add(0)
			}
			loop[loopid] := i
		} else if c = "]" {
			if tape[idx] = 0 {
				loop[loopid] := 0
				loopid := loopid - 1
			} else {
				i := loop[loopid]
			}
		} else {
			process(c)
		}

		i := i + 1
	}
}

# Run the interpreter
eval("main.bf.tns")
